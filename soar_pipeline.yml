#This template defines the entire SOAR pipeline as code. It creates the EventBridge rule, the SNS topic, the Lambda function, and all the necessary IAM permissions.

AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless SOAR for GuardDuty: EventBridge -> SNS + Lambda (auto-remediate EC2)

Parameters:
  AlertEmailAddress:
    Type: String
    Description: Email to receive SNS security alerts
  EnableDryRun:
    Type: String
    AllowedValues: ['true','false']
    Default: 'false'
    Description: If 'true', Lambda logs intended action without stopping EC2
  InstanceTagKey:
    Type: String
    Default: AutoQuarantineEligible
  InstanceTagValue:
    Type: String
    Default: 'true'

Resources:
  # SNS Topic + policy so EventBridge can publish
  AlertSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlertEmailAddress

  AlertSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: [ !Ref AlertSNSTopic ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowEventBridgeToPublish
            Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: 'sns:Publish'
            Resource: !Ref AlertSNSTopic

  # Log group with retention for Lambda
  RemediationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${RemediationLambdaFunction}
      RetentionInDays: 30

  # Lambda Role with least-privilege + tag guard
  RemediationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2StopDescribeByTag
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Describe
                Effect: Allow
                Action: ['ec2:DescribeInstances']
                Resource: '*'
              - Sid: StopByTag
                Effect: Allow
                Action: ['ec2:StopInstances']
                Resource: '*'
                Condition:
                  StringEquals:
                    aws:ResourceTag/${InstanceTagKey}: ${InstanceTagValue}

  # Lambda function (Python 3.12) â€“ stops instances, honors DryRun
  RemediationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: remediate_ec2.lambda_handler
      Runtime: python3.12
      Role: !GetAtt RemediationLambdaRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DRY_RUN: !Ref EnableDryRun
      Code:
        ZipFile: |
          import boto3, json, os
          ec2 = boto3.client('ec2')
          def lambda_handler(event, context):
              print("GuardDuty event:", json.dumps(event))
              try:
                  instance_id = event['detail']['resource']['instanceDetails']['instanceId']
              except KeyError:
                  print("No EC2 instance in finding.")
                  return {"statusCode": 400, "body": "No instanceId"}
              dry = os.getenv("DRY_RUN","false").lower()=="true"
              try:
                  if dry:
                      print(f"[DRYRUN] Would stop {instance_id}")
                  else:
                      resp = ec2.stop_instances(InstanceIds=[instance_id], DryRun=False)
                      print(f"Stop sent for {instance_id}: {resp}")
                  return {"statusCode": 200, "body": f"Handled {instance_id}", "dryRun": dry}
              except Exception as e:
                  print("Error:", e)
                  return {"statusCode": 500, "body": str(e)}

  # EventBridge rule: only real GuardDuty findings, optional type filter
  GuardDutyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Routes GuardDuty findings to SNS + Lambda
      EventPattern:
        source: ['aws.guardduty']
        detail-type: ['GuardDuty Finding']
        # Uncomment to narrow to a specific type:
        # detail:
        #   type: ['Trojan:EC2/BlackholeTraffic!']
      Targets:
        - Id: SNSTarget
          Arn: !Ref AlertSNSTopic
        - Id: LambdaTarget
          Arn: !GetAtt RemediationLambdaFunction.Arn

  # Allow EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RemediationLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GuardDutyEventRule.Arn

Outputs:
  SnsTopicArn:
    Value: !Ref AlertSNSTopic
    Export:
      Name: !Sub ${AWS::StackName}-AlertSNSTopicArn
  LambdaName:
    Value: !Ref RemediationLambdaFunction
  EventRuleArn:
    Value: !GetAtt GuardDutyEventRule.Arn
